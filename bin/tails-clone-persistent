#!/usr/bin/perl -T
my $program = 'tails-clone-persistent';
my $version = '0.2';

#######################################################################
#
# tails-clone-persistent
#
# We call &tails_clone_persistent_helper to do our dirty work. It 
# has no user interaction or intelligence. That's all in here.
# This is because we use an expect() wrapper to safely provide 
# passphrases to the luks routines.
#
#######################################################################


use strict;
use warnings;

use Expect;
use Gtk2 '-init';
use Bytes::Random::Secure qw(random_bytes_base64);

#use Linux::ACL;		# would be nice but it's not packaged

# Secure our path
$ENV{'PATH'} = '/bin:/usr/bin:/sbin:/usr/sbin';

my $expect_timeout = 3600; # Data flushing can be slooow
my $tails_installer = '/usr/lib/tails_installer/tails-installer';

my $helper_utility = '/usr/sbin/tails-clone-persistent-helper';


#############################
# Process command line args #
#############################

# default arguments
my %CMD_OPTIONS = (
	'source' => '/live/persistence/TailsData_unlocked',
	'target' => undef, # will prompt for target drive
	'deniable' => undef, # fast operation
	'decoy' => undef,
	'install' => undef, # will prompt iff tails not installed on target
	'debug' => undef,
	'help' => undef,
);

sub parse_options {
  while($ARGV[0] and $ARGV[0]=~/^--/) {
	my $option = shift(@ARGV);
	my $value = 1;
	$option =~ s/^--//;
	if($option =~ /^([^=]+)=(.*)$/) {
		($option, $value) = ($1, $2);
	}
	# allow for "no-OPTION" to unset defaults
	if($option =~ s/^no-//){
		$CMD_OPTIONS{$option} = undef;
	} else {
		$CMD_OPTIONS{$option} = $value;
	}
  }
} 

sub option_help {
	print qq[This is ${program} v${version}

This tool clones an existing persistent tails partition to a target
drive, creating a new persistent partition on that drive if necessary,
and clone-installing the running tails if necessary.

It takes the following options:

--source=DIR    Location of data to be copied
  --no-source   Copy nothing; create target partition only
--target=DEVICE Drive (NOT partition) to be written to (e.g. /dev/sdb)
--deniable      Make a deniable partition by zeroing target (SLOW)
--decoy         Make a decoy partition by randomizing target
                 (implies --deniable --no-source)
--install       Clone-install tails on the target without prompting
--debug         Enable debugging information
--help          This help

];
}


################################
# Graphical interface routines #
################################


# Need global access to window, hboxes, buttons to toggle visibility
my ($graphic_window, 
	$working_hbox, 
	$pass_hbox, 
	$pass_confirm_hbox, 
	$chooser_hbox, 
	$reuse_hbox, 
	$button_hbox, 
	$quit_button, 
	$continue_button);

# Need global access to particular widgets to read and write contents
my ($working_label, $pass_entry, $pass_confirm_entry, $chooser);

# Event success flag
my ($event_outcome);

sub graphic_window_init() {

	$graphic_window = Gtk2::Window->new();
	$graphic_window->set_title('Persistent Volume Cloner');
	$graphic_window->signal_connect('delete-event' => sub {exit(-1);});

	my $vbox = Gtk2::VBox->new;

	# First a label - we'll fill this with relevant information as we go.

	$working_hbox = Gtk2::HBox->new;
	$working_label = Gtk2::Label->new('Working...');

	$working_hbox->pack_start($working_label, 0,0,5);
	$vbox->pack_start($working_hbox, 0,0,5);

	# Passphrase entry

	$pass_hbox = Gtk2::HBox->new;
	
	my $pass_label = Gtk2::Label->new('Passphrase:');

	$pass_entry = Gtk2::Entry->new;
	$pass_entry->set_visibility(0);
	$pass_entry->set_invisible_char('*');
	
	$pass_hbox->pack_start($pass_label, 0,0,5);
	$pass_hbox->pack_start($pass_entry, 1,1,5);
	$vbox->pack_start($pass_hbox, 0,0,0);

	# And confirm...

	$pass_confirm_hbox = Gtk2::HBox->new;

	my $pass_confirm_label = Gtk2::Label->new('Confirm:');

	$pass_confirm_entry = Gtk2::Entry->new;
	$pass_confirm_entry->set_visibility(0);
	$pass_confirm_entry->set_invisible_char('*');

	$pass_confirm_hbox->pack_start($pass_confirm_label, 0,0,5);
	$pass_confirm_hbox->pack_start($pass_confirm_entry, 1,1,5);
	$vbox->pack_start($pass_confirm_hbox, 0,0,5);

	# Chooser
	# We create this empty now, and add entries to it later 
	# Note the perl GTK2 interface doesn't implement ComboBoxText yet.

	$chooser_hbox = Gtk2::HBox->new;
	$chooser = Gtk2::ComboBox->new_text;

	$chooser_hbox->pack_start($chooser, 1,1,5);
	$vbox->pack_start($chooser_hbox, 0,0,5);

	# Reuse or overwrite

	$reuse_hbox = Gtk2::HBox->new;

	my $trash_button = Gtk2::Button->new_with_mnemonic('_Delete and recreate');
	$trash_button->signal_connect('clicked'=> sub{$event_outcome=0; Gtk2->main_quit});

	my $reuse_button = Gtk2::Button->new_with_mnemonic('_Reuse existing');
	$reuse_button->signal_connect('clicked'=> sub{$event_outcome=1; Gtk2->main_quit});

	$reuse_hbox->pack_start($trash_button, 0,0,5);
	$reuse_hbox->pack_end($reuse_button, 0,0,5);
	$vbox->pack_start($reuse_hbox, 0,0,5);

	# Quit and Continue buttons. We'll reuse these as much as we can.

	$button_hbox = Gtk2::HBox->new;
	
	$quit_button = Gtk2::Button->new_with_mnemonic('_Quit');
	$quit_button->signal_connect('clicked'=> sub{$event_outcome=0; Gtk2->main_quit});

	$continue_button = Gtk2::Button->new_with_mnemonic('_Continue');
	$continue_button->signal_connect('clicked'=> sub{$event_outcome=1; Gtk2->main_quit});

	$button_hbox->pack_end($continue_button, 0,0,5);
	$button_hbox->pack_end($quit_button, 0,0,5);
	$vbox->pack_end($button_hbox, 0,0,5);

	# add vbox to window and show everything in the vbox by default
	# we'll hide specific hboxes elsewhere
	
	$graphic_window->add($vbox);
	$vbox->show_all;

}


sub secure_input() {
	my $prompt = shift;
	my $input='';
	$working_label->set_text($prompt);
	$pass_entry->set_text('');
	
	$working_hbox->show;
	$pass_hbox->show;
	$pass_confirm_hbox->hide;
	$chooser_hbox->hide;
	$reuse_hbox->hide;
	$button_hbox->show_all;
	
	$event_outcome=0;
	$graphic_window->show;
	Gtk2->main;
	
	if($event_outcome){
		$input=$pass_entry->get_text();
		$input =~ s/[\n\r\f\t]//g;
	}

	$pass_entry->set_text('');
	return $input;
}


sub ask_passphrase() {
	$working_label->set_text(
	q[A passphrase will be used to encrypt your new persistent partition.

The passphrase should contain at least 16 characters, and at least one 
non-alphanumeric character, such as punctuation.
]);
	my ($passphrase, $confirm, $success);
	
	do {
		$pass_entry->set_text('');
		$pass_confirm_entry->set_text('');
		
		$working_hbox->show;
		$pass_hbox->show;
		$pass_confirm_hbox->show;
		$chooser_hbox->hide;
		$reuse_hbox->hide;
		$button_hbox->show_all;

		$graphic_window->show;
		Gtk2->main;
		
		return '' unless $event_outcome;
		
		$passphrase = $pass_entry->get_text();
		$confirm = $pass_confirm_entry->get_text();
		$passphrase =~ s/[\n\r\f\t]//g;
		$confirm =~ s/[\n\r\f\t]//g;

		if(length($passphrase) < 16 or
			$passphrase !~ /[^[:alnum:]]/) {
			$working_label->set_text(
			q[PASSPHRASE IS NOT STRONG ENOUGH - PLEASE TRY AGAIN
			
The passphrase should contain at least 16 characters, and at least one 
non-alphanumeric character, such as punctuation.
]) ;
		} elsif($passphrase ne $confirm) {
			$working_label->set_text(
			q[CONFIRMATION DOES NOT MATCH - PLEASE TRY AGAIN

The passphrase should contain at least 16 characters, and at least one 
non-alphanumeric character, such as punctuation.
]);
		} else {
			$success=1;
		}
	} until($success);
	
	$pass_entry->set_text('');
	$pass_confirm_entry->set_text('');
	return $passphrase;
}


sub make_submenu() {
	my $prompt = shift;
	$working_label->set_text($prompt);
	
	foreach my $i (@_) {
		$chooser->append_text($i);
	}
	$chooser->set_active(0);
	
	$working_hbox->show;
	$pass_hbox->hide;
	$pass_confirm_hbox->hide;
	$chooser_hbox->show;
	$reuse_hbox->hide;
	$button_hbox->show_all;
	
	$event_outcome=0;
	$graphic_window->show;
	Gtk2->main;
	
	return '' unless $event_outcome;
	
	my $index=$chooser->get_active;
	
	return $_[$index];
	
}

sub make_confirm() {
	my $prompt = shift;
	my $input='';
	$working_label->set_text($prompt);
	
	$working_hbox->show;
	$pass_hbox->hide;
	$pass_confirm_hbox->hide;
	$chooser_hbox->hide;
	$reuse_hbox->hide;
	$button_hbox->show_all;
	
	$event_outcome=0;
	$graphic_window->show;
	Gtk2->main;
	
	return $event_outcome;
}

sub make_reuse() {
	my $prompt = shift;
	my $input='';
	$working_label->set_text($prompt);
	
	$working_hbox->show;
	$pass_hbox->hide;
	$pass_confirm_hbox->hide;
	$chooser_hbox->hide;
	$reuse_hbox->show_all;
	$button_hbox->hide;
	
	$event_outcome=0;
	$graphic_window->show;
	Gtk2->main;
	
	return $event_outcome;
}

sub make_success() {
	my $prompt = shift;
	my $input='';
	$working_label->set_text($prompt);
	
	$working_hbox->show;
	$pass_hbox->hide;
	$pass_confirm_hbox->hide;
	$chooser_hbox->hide;
	$reuse_hbox->hide;
	$button_hbox->show_all;
	$continue_button->hide;
	
	$event_outcome=0;
	$graphic_window->show;
	Gtk2->main;
	
	return $event_outcome;
}

sub make_failure() {
	# failure is so near to success ;-)
	&make_success(shift);
	die;
}

sub make_progress() {
	my $prompt = shift;
	my $input='';
	$working_label->set_text($prompt);
	
	$working_hbox->show;
	$pass_hbox->hide;
	$pass_confirm_hbox->hide;
	$chooser_hbox->hide;
	$reuse_hbox->hide;
	$button_hbox->hide;
	
	$graphic_window->show;
	
	# run just enough GTK iterations to process the redraw event queue
	Gtk2->main_iteration while Gtk2->events_pending;

	# return success so we can keep doing stuff
	return 1;
}


#################################


sub get_tails_partition {
	my $tails_partition;
	my $pipe;
	
	open($pipe, '-|', '/bin/mount') 
		or &make_failure("Failed to read mount points. Aborting.");
	while(<$pipe>) {
		print $_ if $CMD_OPTIONS{'debug'};
		if(m!^([/[:alnum:]._-]+) on /lib/live/mount/medium type vfat!) {
			$tails_partition = $1;
			last;
		}
	}
	close $pipe;
	return $tails_partition;
}

sub choose_block_device {
	my $prompt = shift;
	my $except = shift;
	my @block_devices;
	my $pipe;

	open($pipe, '-|', '/sbin/blkid');
	while(<$pipe>) {
		print $_ if $CMD_OPTIONS{'debug'};
		if(m!^([/[:alnum:]._-]+): LABEL="Tails" UUID="[a-fA-F0-9-]+" TYPE="vfat"!) {
			my $device = $1;
			if($device ne $except) {
				chop $device;
				push(@block_devices, $device);
			}
		}
	}
	close $pipe;
	
	if(@block_devices) {
		# Hooray, we found some likely targets. Let the user choose one.
		# (NB the user can click cancel if she doesn't like any of them
		# however the dialog currently doesn't make this clear)
		# TODO: give user better info in menu, e.g. make and model?
		return &make_submenu($prompt, @block_devices);
	} else {
		# otherwise return false and let the caller deal with it
		return "";
	}
}

sub mount_device {
	my $block_device = shift;
	my $mount_point;
	my $pipe;
	
	print qq[Mounting crypted partition...\n] if $CMD_OPTIONS{'debug'};
	open($pipe, '-|', '/usr/bin/udisksctl', 'mount', '--block-device', ${block_device})
		or &make_failure("Could not mount disk ${block_device}. Aborting.");
	while(<$pipe>) {
		print $_ if $CMD_OPTIONS{'debug'};
		if(m!^Mounted \S+ at ([/[:alnum:]._-]+)!) {
			$mount_point = $1;
			last;
		}
	}
	close $pipe;
	return $mount_point;
}


##################################


sub clone_to_tails() {	
	
	###############
	# Preparation #
	###############
	
	# sanitise input - forbid globs, escapes, special quotes
	&make_failure("Unsafe characters in source path. Aborting.") unless 
		$CMD_OPTIONS{'source'} =~ m!^([^*\\'`"]*)$!;
	my $source_location = $1;
	
	my $tails_partition = &get_tails_partition();
	&make_failure("Could not determine running Tails partition. Aborting.") 
		unless $tails_partition;
	print "Tails volume found on $tails_partition\n" if $CMD_OPTIONS{'debug'};

	# Okay, kid. This is where it gets complicated.

	my $block_device = $CMD_OPTIONS{'target'};
		 
	if($block_device) {
		&make_failure("${block_device} is not a valid block device") 
			unless -b $block_device;
	} else {
		# No target device supplied on the command line; ask user.
		# Note that this subroutine only actually prompts the user iff
		# it can find a likely target, otherwise it returns false.
		# We'll deal with that in a bit.
		$block_device = &choose_block_device('SELECT TAILS DISK TO COPY TO', $tails_partition);
	}
	
	if($CMD_OPTIONS{'install'}) {
		# install forced by command line. Continue without prompting.
		
		if($block_device) {
			# we are overwriting an existing tails drive
			# force use of the block device we already selected so we
			# don't prompt the user twice
			system($tails_installer, '-u', '-n', '--clone', '-P', '-m', '-x', 
				'-f', $block_device);
		} else {
			# need to create a new tails drive

			# TODO: handle the dialog for choosing the non-tails
			# target ourselves and feed it to tails-installer instead of
			# prompting user twice
			
			system($tails_installer, '-u', '-n', '--clone', '-P', '-m', '-x');
			$block_device = &choose_block_device('SELECT TAILS DISK TO COPY TO', $tails_partition);
			&make_failure("No target disk") unless $block_device;
		}

	} elsif(!$block_device) {
		
		# the user didn't (couldn't?) choose a tails target
		# and install not forced, so we must ask permission to proceed
		
		&make_failure("No target disk") unless &make_confirm(
q[No tails drive selected. Insert a new USB drive (minimum 4GB)]);

		# TODO: handle the dialog for choosing the non-tails
		# target ourselves and feed it to tails-installer instead of
		# prompting user twice
		
		system($tails_installer, '-u', '-n', '--clone', '-P', '-m', '-x');
		$block_device = &choose_block_device('SELECT TAILS DISK TO COPY TO', $tails_partition);
		&make_failure("No target disk") unless $block_device;

	} 
	
	# phew.

	my $passphrase;
	my $partition_mode='new';
	if($CMD_OPTIONS{'deniable'}) {
		
		$partition_mode='deniable';

	} elsif($CMD_OPTIONS{'decoy'}) {

		# Generate a cryptographically-secure random passphrase, but
		# otherwise behave as if the user specified "deniable".
		#
		# 57 bytes of base64 should be plenty. 57 bytes (= 76 chars)
		# is the line length of base64 - any more will incur padding.
		# There's nothing else special about "57".
		#
		# NB by default, Bytes::Random::Secure seeds from 256 bits
		# of /dev/random (blocking). This is appropriate for a
		# graphical box such as tails, but only gives us 32 bytes of
		# "true" randomness.
		#
		# We could just slurp those 32 bytes straight out of /dev/random
		# but running them through a CSPRNG first is never a bad idea.
		# 
		# NBNB this is utter, utter overkill. Nobody's real passphrase
		# is going to be anywhere near as "random" as this one, so if an
		# adversary were able to detect a real partition filled mostly
		# of crypted zeros in a sea of our "perfectly random" decoys,
		# it is most likely NOT going to be by fingerprinting our PRNG.
		
		$passphrase = random_bytes_base64(57);
		print "Generated randomness:\n", $passphrase, "\n" if $CMD_OPTIONS{'debug'};
		
		# We generate the decoy filesystem through the same method as
		# we make a deniable one, in order to minimise the chances that
		# errors in our logic could be used to fingerprint our actions.

		$partition_mode='deniable';
		
		# BUT... don't copy any data, because that a) wastes time and
		# b) wears out our target drive for no good reason.
		#
		# The only reason we'd go to such lengths as copying disposable
		# data over the zeroed decoy partition would be if an adversary
		# could determine the write times of the blocks on the target
		# medium. And if that were true, we'd have much worse problems.
		
		$source_location = "";

	} else {

		# if a persistent partition already exists on the target drive
		if(-b "${block_device}2") {
			return unless &make_confirm("Update the existing persistent data on ${block_device}?");

			my $reuse = &make_reuse(
q[If you know the passphrase of the target partition, you can reuse it. 
This is faster, and could (slightly) extend the life of your disk.

Otherwise, you should delete it and make one with a new passphrase.
]);

			if($reuse){
				$partition_mode='existing';
				$passphrase = &secure_input('Please unlock the target disk');
			}
		} 
	}
	
	# if no passphrase given (incl. if there was no existing partition)
	unless($passphrase) {
		$passphrase = &ask_passphrase;
		return unless $passphrase;
	}
	
	###############
	# Ready to go #
	###############

	# Now call expect to handle the setuid helper
	&make_progress('Copying data...');
	
	$ENV{'TCP_HELPER_DEBUG'}='1' if $CMD_OPTIONS{'debug'};
	# the "factory" is just a standard expect object
	my $exp_factory = new Expect;
	# set default behaviours on the factory before spawning
	$exp_factory->raw_pty(1);
	if($CMD_OPTIONS{'debug'}) {
		$exp_factory->exp_internal(1);
	} else {
		$exp_factory->log_stdout(0);
	};
	
	# fork a new expect from the factory
	my $exp = $exp_factory->spawn($helper_utility, $source_location, $block_device, $partition_mode);
	&make_failure("Could not run ${helper_utility}. Aborting.") unless $exp;

	$exp->expect($expect_timeout, 
	
		# Fatal errors
		[
		"Cannot exec", sub{
			&make_failure("Could not run ${helper_utility}. Aborting.");
		}], [
		"Usage: ", sub{
			&make_failure("Bad syntax when calling ${helper_utility}. Aborting.");
		}], [
		'TCPH_ERROR .*$', sub{
			my $self=shift;
			my $prompt = $self->exp_match();
			$prompt =~ s/^TCPH_ERROR //;
			&make_failure($prompt);
		}],	
				
		# Progress indicators
		[
		'TCPH .*$', sub{
			my $self=shift;
			my $prompt = $self->exp_match();
			$prompt =~ s/^TCPH //;
			&make_progress($prompt);
			exp_continue;
		}],	
				
		# Request and response
		[
		"Type uppercase yes", sub{
			my $self=shift;
			# I suspect a race condition here, as this often fails with
			# a permissions error within expect, but never fails when
			# run by hand. Sleep for a while to let data flushing 
			# happen in the background.
			sleep(1);
			$self->send("YES\n");
			exp_continue;
		}], [
		"(Enter|Verify) passphrase", sub{
			my $self=shift;
			# allow subprocess to flush input buffer on slow H/W
			sleep(1);
			$self->send("${passphrase}\n");
			exp_continue;
		}], [
		"No key available with this passphrase", sub{
			$passphrase = &secure_input('Could not unlock target partition with that passphrase. Please try again');
			unless($passphrase) {
				&make_failure("Could not unlock target partition");
			}
			exp_continue;
		}]
	);
	
	&make_success('Copy complete');
}


#####################################


sub main {
	&parse_options;
	&graphic_window_init;
		
	if($CMD_OPTIONS{'help'}) {
		&option_help;
	} else {
		&clone_to_tails;
	}
}

&main;
